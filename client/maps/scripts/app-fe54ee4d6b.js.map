{"version":3,"sources":["scripts/app-fe54ee4d6b.js"],"names":["angular","module","authService","Agent","$rootScope","logOut","logout","$promise","then","setAuthenticationData","signUp","email","password","create","login","accessToken","authentication","isAuthenticated","user","tokenId","id","$inject","factory","authInterceptionService","$q","$location","toastr","responseError","rejection","status","data","error","code","warning","timeOut","progressBar","onHidden","path","reject","service","SignupController","$timeout","$state","startTimer","timer","cancel","go","vm","this","savedSuccessfully","message","registration","confirmPassword","response","controller","LoginController","loginData","$emit","err","config","snapRemoteProvider","globalOptions","disable","apartmentsService","Apartment","getApartments","query","createApartment","apartment","save","findApartments","searchBy","find","filter","where","streetName","ApartmentsController","settings","$uibModal","lang","langLocale","gridOptions","columnDefs","name","field","apartments","editApartment","modalInstance","open","animation","templateUrl","controllerAs","resolve","result","newApartment","push","ApartmentDetailsController","$uibModalInstance","close","dismiss","number","wrlNavbar","NavbarController","setAuthData","userEmail","$on","event","preventDefault","stopPropagation","directive","restrict","scope","bindToController","acmeMalarkey","malarkey","linkFunc","el","attr","watcher","typist","typeSpeed","deleteSpeed","pauseDelay","loop","postfix","addClass","forEach","extraValues","value","type","pause","$watch","contributors","contributor","MalarkeyController","$log","githubContributor","activate","getContributors","info","template","link","$http","limit","getContributorsComplete","getContributorsFailed","toJson","get","apiHost","window","undefined","getHost","url","m","match","urlBase","authHeader","urlBaseHost","location","host","Resource","LoopBackAuth","$injector","R","prototype$__findById__accessTokens","params","fk","method","prototype$__destroyById__accessTokens","prototype$__updateById__accessTokens","prototype$__get__accessTokens","isArray","prototype$__create__accessTokens","prototype$__delete__accessTokens","prototype$__count__accessTokens","createMany","upsert","exists","findById","findOne","updateAll","deleteById","count","prototype$updateAttributes","createChangeStream","include","interceptor","setUser","userId","rememberMe","resource","clearUser","clearStorage","confirm","resetPassword","getCurrent","currentUserId","currentUserData","__isGetCurrentUser__","getCachedCurrent","getCurrentId","modelName","self","props","load","storage","key","propsPrefix","localStorage","sessionStorage","prototype","accessTokenId","userData","$httpProvider","interceptors","request","headers","res","body","when","provider","setAuthHeader","header","setUrlBase","getUrlBase","$get","$resource","actions","$save","success","call","wrlFooter","FooterController","MainController","runBlock","debug","run","routerConfig","$stateProvider","$urlRouterProvider","state","otherwise","constant","moment","baseApiUrl","$logProvider","toastrConfig","LoopBackResourceProvider","localStorageServiceProvider","debugEnabled","allowHtml","positionClass","preventDuplicates","setPrefix","$templateCache","put"],"mappings":"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","file":"scripts/app-fe54ee4d6b.js","sourcesContent":["(function () {\n    \"use strict\";\n\n    angular.module('wrlUi.security', ['ngResource']);\n\n})();\n\n(function () {\n  \"use strict\";\n\n  angular\n    .module(\"wrlUi.security\")\n    .factory(\"authService\", authService);\n\n  /** @ngInject */\n  function authService(Agent, $rootScope) {\n\n    var authentication = {};\n    setAuthenticationData();\n\n    return {\n      authentication: authentication,\n      login: login,\n      logOut: logOut,\n      signUp: signUp\n    };\n\n    function logOut() {\n      return Agent\n        .logout()\n        .$promise.then(function () {\n          setAuthenticationData();\n        });\n    };\n\n    function signUp(email, password) {\n      return Agent.create({email: email, password: password}).$promise;\n    };\n\n    function login(email, password) {\n      return Agent\n        .login({email: email, password: password})\n        .$promise.then(function (accessToken) {\n          setAuthenticationData(accessToken);\n        });\n    };\n\n    function setAuthenticationData(accessToken) {\n      authentication.isAuthenticated = !!accessToken;\n      authentication.user = !!accessToken ? accessToken.user : {};\n      authentication.tokenId = !!accessToken ? accessToken.id : '';\n    }\n  }\n})();\n\n(function () {\n  \"use strict\";\n\n  angular\n    .module(\"wrlUi.security\")\n    .factory(\"authInterceptionService\", authInterceptionService);\n\n  /** @ngInject */\n  function authInterceptionService($q, $location, toastr) {\n    var service = {\n      responseError: responseError\n    };\n\n    return service;\n\n    function responseError(rejection) {\n      if (rejection.status === 401 && rejection.data.error.code == 'AUTHORIZATION_REQUIRED') {\n        toastr.warning('Вы не авторизованы для выполнения этой операции и будете направлены на страницу логина!', {\n          timeOut: 3000,\n          progressBar: true,\n          onHidden: function () {\n            $location.path(\"/login\");\n          }\n        });\n      }\n      return $q.reject(rejection);\n    }\n  }\n})();\n\n(function () {\n    \"use strict\";\n\n    /** @ngInject */\n    function SignupController(authService, $timeout, $state) {\n        var vm = this;\n\n        vm.savedSuccessfully = false;\n        vm.message = \"\";\n\n        vm.registration = {\n            email: \"\",\n            password: \"\",\n            confirmPassword: \"\"\n        };\n\n        vm.signUp = function () {\n            authService.signUp(vm.registration.email, vm.registration.password).then(function (response) {\n                vm.savedSuccessfully = true;\n                vm.message = \"Пользователь успешно зарегистрирован, вы будете направлены на страницу логина через 2 секунды.\";\n                startTimer();\n            },\n            function (error) {\n            });\n        };\n\n        function startTimer() {\n            var timer = $timeout(function () {\n                $timeout.cancel(timer);\n                $state.go(\"login\");\n            }, 2000);\n        }\n    }\n\n    angular\n        .module(\"wrlUi.security\")\n        .controller(\"SignupController\", SignupController);\n})();\n\n(function () {\n  \"use strict\";\n\n  /** @ngInject */\n  function LoginController(authService, $state, $rootScope, toastr) {\n    var vm = this;\n\n    vm.message = \"\";\n\n    vm.loginData = {\n      email: \"\",\n      password: \"\"\n    };\n\n    vm.login = function () {\n      authService.login(vm.loginData.email, vm.loginData.password).then(function () {\n          $rootScope.$emit('Event::UserLoggedIn');\n          $state.go(\"apartments\");\n        },\n        function (err) {\n          toastr.error('<strong>Ошибка авторизации!</strong> Email пользователя и/или пароль не верны. <br />' +\n            'Введите корректные данные.', {\n          });\n        });\n    };\n  }\n\n  angular\n    .module(\"wrlUi.security\")\n    .controller(\"LoginController\", LoginController);\n})();\n\n(function() {\n    \"use strict\";\n\n    angular.module(\"wrlUi.apartments\", [\"ui.grid\", \"ui.grid.resizeColumns\", \"snap\"])\n        .config(function(snapRemoteProvider) {\n            snapRemoteProvider.globalOptions = {\n                disable: \"right\"\n            }\n        });\n})();\n\n(function () {\n  \"use strict\";\n\n  angular\n    .module(\"wrlUi.apartments\")\n    .factory(\"apartmentsService\", apartmentsService);\n\n  /** @ngInject */\n  function apartmentsService(Apartment) {\n    return {\n      getApartments: getApartments,\n      createApartment: createApartment,\n      findApartments: findApartments\n    };\n\n    function getApartments() {\n      return Apartment.query().$promise;\n    }\n\n    function createApartment(apartment) {\n      return Apartment.save(apartment).$promise;\n    }\n\n    function findApartments(searchBy) {\n      return Apartment.find({\n        filter: {where: {streetName: searchBy.streetName}}\n      }).$promise;\n    }\n  }\n})();\n\n(function () {\n    \"use strict\";\n\n    angular\n        .module(\"wrlUi.apartments\")\n        .controller(\"ApartmentsController\", ApartmentsController);\n\n    /** @ngInject */\n    function ApartmentsController(apartmentsService, settings, $uibModal) {\n        var vm = this;\n\n        vm.lang = settings.langLocale;\n\n        vm.searchBy = {\n          streetName: ''\n        };\n\n        vm.gridOptions = {\n            columnDefs: [\n                {\n                    name: \"Номер\",\n                    field: \"number\"\n                },\n                {\n                    name: \"Название улицы\",\n                    field: \"streetName\"\n                },\n                {\n                    name: \"№ дома\",\n                    field: \"houseNumber\"\n                }\n            ]\n        }\n\n        apartmentsService.getApartments().then(function (apartments) {\n            vm.gridOptions.data = apartments;\n        });\n\n        // #region Open Edit Dialog\n\n        vm.editApartment = function(apartment) {\n            var modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: \"app/components/apartments/templates/apartmentDetails.html\",\n                controller: \"ApartmentDetailsController\",\n                controllerAs: \"vm\",\n                resolve: {\n                    apartment: apartment\n                }\n            });\n\n            modalInstance.result.then(function(newApartment) {\n              vm.gridOptions.data.push(newApartment);\n            }, function() {\n\n            });\n        }\n\n        vm.findApartments = function(){\n          apartmentsService.findApartments(vm.searchBy).then(function (apartments) {\n            vm.gridOptions.data = apartments;\n          });\n        }\n\n        // #endregion\n    }\n})();\n\n(function() {\n\n  /** @ngInject */\n  var ApartmentDetailsController = function(apartmentsService, $uibModalInstance) {\n        var vm = this;\n\n        vm.save = function(){\n          apartmentsService.createApartment(vm.apartment).then(function(response){\n            $uibModalInstance.close(response);\n          }, function(error){\n\n          });\n        }\n\n        vm.cancel = function(){\n          $uibModalInstance.dismiss('cancel');\n        }\n\n        vm.newApartment = function(){\n          return {\n            number: \"testNumber\"\n          }\n        }\n\n        vm.apartment = vm.newApartment();\n    };\n\n    angular.module(\"wrlUi.apartments\").controller(\"ApartmentDetailsController\", ApartmentDetailsController);\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('wrlUi', ['ui.router', 'ui.bootstrap', 'wrlUi.security', 'wrlUi.apartments', 'toastr',\n      'lbServices', 'LocalStorageModule']);\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('wrlUi')\n    .directive('wrlNavbar', wrlNavbar);\n\n  function wrlNavbar() {\n    var directive = {\n      restrict: 'E',\n      templateUrl: 'app/components/navbar/navbar.html',\n      scope: false,\n      controller: NavbarController,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n\n    return directive;\n\n    /** @ngInject */\n    function NavbarController(authService, $rootScope, $state) {\n\n      var vm = this;\n\n      vm.logOut = function () {\n        authService.logOut().then(function () {\n          vm.setAuthData();\n          $state.go(\"home\");\n        });\n      }\n\n      vm.setAuthData = function () {\n        vm.isAuthenticated = authService.authentication.isAuthenticated;\n        vm.userEmail = authService.authentication.user.email\n      }\n\n      vm.setAuthData();\n\n      // Event subscription is necessary because navbar directive is located out of main\n      // view and changes in authServise are out of $digest cycle and don't influence to current scope\n      $rootScope.$on('Event::UserLoggedIn', function (event) {\n        event.preventDefault();\n        event.stopPropagation();\n        vm.setAuthData();\n      })\n    }\n  }\n\n})();\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('wrlUi')\r\n    .directive('acmeMalarkey', acmeMalarkey);\r\n\r\n  /** @ngInject */\r\n  function acmeMalarkey(malarkey) {\r\n    var directive = {\r\n      restrict: 'E',\r\n      scope: {\r\n        extraValues: '='\r\n      },\r\n      template: '&nbsp;',\r\n      link: linkFunc,\r\n      controller: MalarkeyController,\r\n      controllerAs: 'vm'\r\n    };\r\n\r\n    return directive;\r\n\r\n    function linkFunc(scope, el, attr, vm) {\r\n      var watcher;\r\n      var typist = malarkey(el[0], {\r\n        typeSpeed: 40,\r\n        deleteSpeed: 40,\r\n        pauseDelay: 800,\r\n        loop: true,\r\n        postfix: ' '\r\n      });\r\n\r\n      el.addClass('acme-malarkey');\r\n\r\n      angular.forEach(scope.extraValues, function(value) {\r\n        typist.type(value).pause().delete();\r\n      });\r\n\r\n      watcher = scope.$watch('vm.contributors', function() {\r\n        angular.forEach(vm.contributors, function(contributor) {\r\n          typist.type(contributor.login).pause().delete();\r\n        });\r\n      });\r\n\r\n      scope.$on('$destroy', function () {\r\n        watcher();\r\n      });\r\n    }\r\n\r\n    /** @ngInject */\r\n    function MalarkeyController($log, githubContributor) {\r\n      var vm = this;\r\n\r\n      vm.contributors = [];\r\n\r\n      activate();\r\n\r\n      function activate() {\r\n        return getContributors().then(function() {\r\n          $log.info('Activated Contributors View');\r\n        });\r\n      }\r\n\r\n      function getContributors() {\r\n        return githubContributor.getContributors(10).then(function(data) {\r\n          vm.contributors = data;\r\n\r\n          return vm.contributors;\r\n        });\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n})();\r\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('wrlUi')\r\n    .factory('githubContributor', githubContributor);\r\n\r\n  /** @ngInject */\r\n  function githubContributor($log, $http) {\r\n    var apiHost = 'https://api.github.com/repos/Swiip/generator-gulp-angular';\r\n\r\n    var service = {\r\n      apiHost: apiHost,\r\n      getContributors: getContributors\r\n    };\r\n\r\n    return service;\r\n\r\n    function getContributors(limit) {\r\n      if (!limit) {\r\n        limit = 30;\r\n      }\r\n\r\n      return $http.get(apiHost + '/contributors?per_page=' + limit)\r\n        .then(getContributorsComplete)\r\n        .catch(getContributorsFailed);\r\n\r\n      function getContributorsComplete(response) {\r\n        return response.data;\r\n      }\r\n\r\n      function getContributorsFailed(error) {\r\n        $log.error('XHR Failed for getContributors.\\n' + angular.toJson(error.data, true));\r\n      }\r\n    }\r\n  }\r\n})();\r\n\n(function(window, angular, undefined) {'use strict';\n\nvar urlBase = \"http://localhost:3001/api\";\nvar authHeader = 'authorization';\n\nfunction getHost(url) {\n  var m = url.match(/^(?:https?:)?\\/\\/([^\\/]+)/);\n  return m ? m[1] : null;\n}\n\nvar urlBaseHost = getHost(urlBase) || location.host;\n\n/**\n * @ngdoc overview\n * @name lbServices\n * @module\n * @description\n *\n * The `lbServices` module provides services for interacting with\n * the models exposed by the LoopBack server via the REST API.\n *\n */\nvar module = angular.module(\"lbServices\", ['ngResource']);\n\n/**\n * @ngdoc object\n * @name lbServices.User\n * @header lbServices.User\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `User` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"User\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/Users/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__findById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__updateById__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/Users/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__get__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Queries accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__create__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__delete__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$__count__accessTokens\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Counts accessTokens of User.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/Users/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#create\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createMany\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#upsert\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/Users\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#exists\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/Users/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#find\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/Users\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#findOne\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/Users/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateAll\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/Users/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#deleteById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#count\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/Users/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#prototype$updateAttributes\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/Users/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#createChangeStream\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/Users/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#login\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#logout\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/Users/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#confirm\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/Users/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#resetPassword\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/Users/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/Users\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#updateOrCreate\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#update\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#destroyById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#removeById\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `User` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCachedCurrent\n         * @methodOf lbServices.User\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.User#login} or\n         * {@link lbServices.User#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A User instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#isAuthenticated\n         * @methodOf lbServices.User\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.User#getCurrentId\n         * @methodOf lbServices.User\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.User#modelName\n    * @propertyOf lbServices.User\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `User`.\n    */\n    R.modelName = \"User\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Apartment\n * @header lbServices.Apartment\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Apartment` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Apartment\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/apartments/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#create\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/apartments\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#createMany\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/apartments\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#upsert\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/apartments\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#exists\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/apartments/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#findById\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/apartments/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#find\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/apartments\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#findOne\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/apartments/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#updateAll\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/apartments/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#deleteById\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/apartments/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#count\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/apartments/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#prototype$updateAttributes\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - PersistedModel id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/apartments/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#createChangeStream\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/apartments/change-stream\",\n          method: \"POST\"\n        },\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#updateOrCreate\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#update\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#destroyById\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Apartment#removeById\n         * @methodOf lbServices.Apartment\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Apartment` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Apartment#modelName\n    * @propertyOf lbServices.Apartment\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Apartment`.\n    */\n    R.modelName = \"Apartment\";\n\n\n    return R;\n  }]);\n\n/**\n * @ngdoc object\n * @name lbServices.Agent\n * @header lbServices.Agent\n * @object\n *\n * @description\n *\n * A $resource object for interacting with the `Agent` model.\n *\n * ## Example\n *\n * See\n * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}\n * for an example of using this object.\n *\n */\nmodule.factory(\n  \"Agent\",\n  ['LoopBackResource', 'LoopBackAuth', '$injector', function(Resource, LoopBackAuth, $injector) {\n    var R = Resource(\n      urlBase + \"/agents/:id\",\n      { 'id': '@id' },\n      {\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__findById__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Find a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"prototype$__findById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/agents/:id/accessTokens/:fk\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__destroyById__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Delete a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__destroyById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/agents/:id/accessTokens/:fk\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__updateById__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Update a related item by id for accessTokens.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `fk` – `{*}` - Foreign key for accessTokens\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"prototype$__updateById__accessTokens\": {\n          params: {\n          'fk': '@fk'\n          },\n          url: urlBase + \"/agents/:id/accessTokens/:fk\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__get__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Queries accessTokens of agent.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `filter` – `{object=}` - \n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"prototype$__get__accessTokens\": {\n          isArray: true,\n          url: urlBase + \"/agents/:id/accessTokens\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__create__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Creates a new instance in accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"prototype$__create__accessTokens\": {\n          url: urlBase + \"/agents/:id/accessTokens\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__delete__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Deletes all accessTokens of this model.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"prototype$__delete__accessTokens\": {\n          url: urlBase + \"/agents/:id/accessTokens\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$__count__accessTokens\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Counts accessTokens of agent.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"prototype$__count__accessTokens\": {\n          url: urlBase + \"/agents/:id/accessTokens/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#create\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"create\": {\n          url: urlBase + \"/agents\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#createMany\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Create a new instance of the model and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"createMany\": {\n          isArray: true,\n          url: urlBase + \"/agents\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#upsert\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"upsert\": {\n          url: urlBase + \"/agents\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#exists\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Check whether a model instance exists in the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `exists` – `{boolean=}` - \n         */\n        \"exists\": {\n          url: urlBase + \"/agents/:id/exists\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#findById\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Find a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         *  - `filter` – `{object=}` - Filter defining fields and include\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"findById\": {\n          url: urlBase + \"/agents/:id\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#find\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Find all instances of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Array.<Object>,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Array.<Object>} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"find\": {\n          isArray: true,\n          url: urlBase + \"/agents\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#findOne\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Find first instance of the model matched by filter from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `filter` – `{object=}` - Filter defining fields, where, include, order, offset, and limit\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"findOne\": {\n          url: urlBase + \"/agents/findOne\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#updateAll\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        \"updateAll\": {\n          url: urlBase + \"/agents/update\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#deleteById\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"deleteById\": {\n          url: urlBase + \"/agents/:id\",\n          method: \"DELETE\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#count\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Count instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `count` – `{number=}` - \n         */\n        \"count\": {\n          url: urlBase + \"/agents/count\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#prototype$updateAttributes\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Update attributes for a model instance and persist it into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - User id\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        \"prototype$updateAttributes\": {\n          url: urlBase + \"/agents/:id\",\n          method: \"PUT\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#createChangeStream\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Create a change stream.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `options` – `{object=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * Data properties:\n         *\n         *  - `changes` – `{ReadableStream=}` - \n         */\n        \"createChangeStream\": {\n          url: urlBase + \"/agents/change-stream\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#login\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Login a user with username/email and password.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `include` – `{string=}` - Related objects to include in the response. See the description of return value for more details.\n         *   Default value: `user`.\n         *\n         *  - `rememberMe` - `boolean` - Whether the authentication credentials\n         *     should be remembered in localStorage across app/browser restarts.\n         *     Default: `true`.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The response body contains properties of the AccessToken created on login.\n         * Depending on the value of `include` parameter, the body may contain additional properties:\n         * \n         *   - `user` - `{User}` - Data of the currently logged in user. (`include=user`)\n         * \n         *\n         */\n        \"login\": {\n          params: {\n            include: \"user\"\n          },\n          interceptor: {\n            response: function(response) {\n              var accessToken = response.data;\n              LoopBackAuth.setUser(accessToken.id, accessToken.userId, accessToken.user);\n              LoopBackAuth.rememberMe = response.config.params.rememberMe !== false;\n              LoopBackAuth.save();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/agents/login\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#logout\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Logout a user with access token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         *  - `access_token` – `{string}` - Do not supply this argument, it is automatically extracted from request headers.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"logout\": {\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.clearUser();\n              LoopBackAuth.clearStorage();\n              return response.resource;\n            }\n          },\n          url: urlBase + \"/agents/logout\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#confirm\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Confirm a user registration with email verification token.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `uid` – `{string}` - \n         *\n         *  - `token` – `{string}` - \n         *\n         *  - `redirect` – `{string=}` - \n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"confirm\": {\n          url: urlBase + \"/agents/confirm\",\n          method: \"GET\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#resetPassword\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Reset password for a user with email.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * This method returns no data.\n         */\n        \"resetPassword\": {\n          url: urlBase + \"/agents/reset\",\n          method: \"POST\"\n        },\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#getCurrent\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Get data of the currently logged user. Fail with HTTP result 401\n         * when there is no user logged in.\n         *\n         * @param {function(Object,Object)=} successCb\n         *    Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *    `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         */\n        \"getCurrent\": {\n           url: urlBase + \"/agents\" + \"/:id\",\n           method: \"GET\",\n           params: {\n             id: function() {\n              var id = LoopBackAuth.currentUserId;\n              if (id == null) id = '__anonymous__';\n              return id;\n            },\n          },\n          interceptor: {\n            response: function(response) {\n              LoopBackAuth.currentUserData = response.data;\n              return response.resource;\n            }\n          },\n          __isGetCurrentUser__ : true\n        }\n      }\n    );\n\n\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#updateOrCreate\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Update an existing model instance or insert a new one into the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *   This method does not accept any parameters.\n         *   Supply an empty object or omit this argument altogether.\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        R[\"updateOrCreate\"] = R[\"upsert\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#update\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Update instances of the model matched by where from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `where` – `{object=}` - Criteria to match model instances\n         *\n         * @param {Object} postData Request data.\n         *\n         * This method expects a subset of model properties as request parameters.\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * The number of instances updated\n         */\n        R[\"update\"] = R[\"updateAll\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#destroyById\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        R[\"destroyById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#removeById\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Delete a model instance by id from the data source.\n         *\n         * @param {Object=} parameters Request parameters.\n         *\n         *  - `id` – `{*}` - Model id\n         *\n         * @param {function(Object,Object)=} successCb\n         *   Success callback with two arguments: `value`, `responseHeaders`.\n         *\n         * @param {function(Object)=} errorCb Error callback with one argument:\n         *   `httpResponse`.\n         *\n         * @returns {Object} An empty reference that will be\n         *   populated with the actual data once the response is returned\n         *   from the server.\n         *\n         * <em>\n         * (The remote method definition does not provide any description.\n         * This usually means the response is a `Agent` object.)\n         * </em>\n         */\n        R[\"removeById\"] = R[\"deleteById\"];\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#getCachedCurrent\n         * @methodOf lbServices.Agent\n         *\n         * @description\n         *\n         * Get data of the currently logged user that was returned by the last\n         * call to {@link lbServices.Agent#login} or\n         * {@link lbServices.Agent#getCurrent}. Return null when there\n         * is no user logged in or the data of the current user were not fetched\n         * yet.\n         *\n         * @returns {Object} A Agent instance.\n         */\n        R.getCachedCurrent = function() {\n          var data = LoopBackAuth.currentUserData;\n          return data ? new R(data) : null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#isAuthenticated\n         * @methodOf lbServices.Agent\n         *\n         * @returns {boolean} True if the current user is authenticated (logged in).\n         */\n        R.isAuthenticated = function() {\n          return this.getCurrentId() != null;\n        };\n\n        /**\n         * @ngdoc method\n         * @name lbServices.Agent#getCurrentId\n         * @methodOf lbServices.Agent\n         *\n         * @returns {Object} Id of the currently logged-in user or null.\n         */\n        R.getCurrentId = function() {\n          return LoopBackAuth.currentUserId;\n        };\n\n    /**\n    * @ngdoc property\n    * @name lbServices.Agent#modelName\n    * @propertyOf lbServices.Agent\n    * @description\n    * The name of the model represented by this $resource,\n    * i.e. `Agent`.\n    */\n    R.modelName = \"Agent\";\n\n\n    return R;\n  }]);\n\n\nmodule\n  .factory('LoopBackAuth', function() {\n    var props = ['accessTokenId', 'currentUserId', 'rememberMe'];\n    var propsPrefix = '$LoopBack$';\n\n    function LoopBackAuth() {\n      var self = this;\n      props.forEach(function(name) {\n        self[name] = load(name);\n      });\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.save = function() {\n      var self = this;\n      var storage = this.rememberMe ? localStorage : sessionStorage;\n      props.forEach(function(name) {\n        save(storage, name, self[name]);\n      });\n    };\n\n    LoopBackAuth.prototype.setUser = function(accessTokenId, userId, userData) {\n      this.accessTokenId = accessTokenId;\n      this.currentUserId = userId;\n      this.currentUserData = userData;\n    }\n\n    LoopBackAuth.prototype.clearUser = function() {\n      this.accessTokenId = null;\n      this.currentUserId = null;\n      this.currentUserData = null;\n    }\n\n    LoopBackAuth.prototype.clearStorage = function() {\n      props.forEach(function(name) {\n        save(sessionStorage, name, null);\n        save(localStorage, name, null);\n      });\n    };\n\n    return new LoopBackAuth();\n\n    // Note: LocalStorage converts the value to string\n    // We are using empty string as a marker for null/undefined values.\n    function save(storage, name, value) {\n      var key = propsPrefix + name;\n      if (value == null) value = '';\n      storage[key] = value;\n    }\n\n    function load(name) {\n      var key = propsPrefix + name;\n      return localStorage[key] || sessionStorage[key] || null;\n    }\n  })\n  .config(['$httpProvider', function($httpProvider) {\n    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');\n  }])\n  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',\n    function($q, LoopBackAuth) {\n      return {\n        'request': function(config) {\n\n          // filter out external requests\n          var host = getHost(config.url);\n          if (host && host !== urlBaseHost) {\n            return config;\n          }\n\n          if (LoopBackAuth.accessTokenId) {\n            config.headers[authHeader] = LoopBackAuth.accessTokenId;\n          } else if (config.__isGetCurrentUser__) {\n            // Return a stub 401 error for User.getCurrent() when\n            // there is no user logged in\n            var res = {\n              body: { error: { status: 401 } },\n              status: 401,\n              config: config,\n              headers: function() { return undefined; }\n            };\n            return $q.reject(res);\n          }\n          return config || $q.when(config);\n        }\n      }\n    }])\n\n  /**\n   * @ngdoc object\n   * @name lbServices.LoopBackResourceProvider\n   * @header lbServices.LoopBackResourceProvider\n   * @description\n   * Use `LoopBackResourceProvider` to change the global configuration\n   * settings used by all models. Note that the provider is available\n   * to Configuration Blocks only, see\n   * {@link https://docs.angularjs.org/guide/module#module-loading-dependencies Module Loading & Dependencies}\n   * for more details.\n   *\n   * ## Example\n   *\n   * ```js\n   * angular.module('app')\n   *  .config(function(LoopBackResourceProvider) {\n   *     LoopBackResourceProvider.setAuthHeader('X-Access-Token');\n   *  });\n   * ```\n   */\n  .provider('LoopBackResource', function LoopBackResourceProvider() {\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setAuthHeader\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} header The header name to use, e.g. `X-Access-Token`\n     * @description\n     * Configure the REST transport to use a different header for sending\n     * the authentication token. It is sent in the `Authorization` header\n     * by default.\n     */\n    this.setAuthHeader = function(header) {\n      authHeader = header;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#setUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @param {string} url The URL to use, e.g. `/api` or `//example.com/api`.\n     * @description\n     * Change the URL of the REST API server. By default, the URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.setUrlBase = function(url) {\n      urlBase = url;\n      urlBaseHost = getHost(urlBase) || location.host;\n    };\n\n    /**\n     * @ngdoc method\n     * @name lbServices.LoopBackResourceProvider#getUrlBase\n     * @methodOf lbServices.LoopBackResourceProvider\n     * @description\n     * Get the URL of the REST API server. The URL provided\n     * to the code generator (`lb-ng` or `grunt-loopback-sdk-angular`) is used.\n     */\n    this.getUrlBase = function() {\n      return urlBase;\n    };\n\n    this.$get = ['$resource', function($resource) {\n      return function(url, params, actions) {\n        var resource = $resource(url, params, actions);\n\n        // Angular always calls POST on $save()\n        // This hack is based on\n        // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/\n        resource.prototype.$save = function(success, error) {\n          // Fortunately, LoopBack provides a convenient `upsert` method\n          // that exactly fits our needs.\n          var result = resource.upsert.call(this, {}, this, success, error);\n          return result.$promise || result;\n        };\n        return resource;\n      };\n    }];\n  });\n\n})(window, window.angular);\n\n/**\n * Created by colipsone on 2/2/2016.\n */\n(function() {\n  'use strict';\n\n  angular\n    .module('wrlUi')\n    .directive('wrlFooter', wrlFooter);\n\n  function wrlFooter() {\n    var directive = {\n      restrict: 'E',\n      templateUrl: 'app/components/footer/footer.html',\n      scope: {\n      },\n      controller: FooterController,\n      controllerAs: 'vm',\n      bindToController: true\n    };\n\n    return directive;\n\n    /** @ngInject */\n    function FooterController() {\n      var vm = this;\n    }\n  }\n\n})();\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('wrlUi')\r\n    .controller('MainController', MainController);\r\n\r\n  /** @ngInject */\r\n  function MainController() {\r\n    var vm = this;\r\n  }\r\n})();\r\n\n(function() {\r\n  'use strict';\r\n\r\n  angular\r\n    .module('wrlUi')\r\n    .run(runBlock);\r\n\r\n  /** @ngInject */\r\n  function runBlock($log) {\r\n\r\n    $log.debug('runBlock end');\r\n  }\r\n\r\n})();\r\n\n(function () {\n  'use strict';\n\n  angular\n    .module('wrlUi')\n    .config(routerConfig);\n\n  /** @ngInject */\n  function routerConfig($stateProvider, $urlRouterProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'app/main/main.html',\n        controller: 'MainController',\n        controllerAs: 'main'\n      }).\n      state(\"login\", {\n        url: \"/login\",\n        templateUrl: \"app/components/security/templates/login.html\",\n        controller: \"LoginController\",\n        controllerAs: \"vm\"\n      }).\n      state(\"signup\", {\n        url: \"/signup\",\n        templateUrl: \"app/components/security/templates/signup.html\",\n        controller: \"SignupController\",\n        controllerAs: \"vm\"\n      }).\n      state(\"apartments\", {\n        url: \"/apartments\",\n        templateUrl: \"app/components/apartments/templates/apartmentsList.html\",\n        controller: \"ApartmentsController\",\n        controllerAs: \"vm\"\n      });\n\n    $urlRouterProvider.otherwise('/');\n  }\n\n})();\n\n/* global malarkey:false, moment:false */\n(function() {\n  'use strict';\n\n  angular\n    .module('wrlUi')\n    .constant('malarkey', malarkey)\n    .constant('moment', moment)\n    .service(\"settings\", function() {\n      return {\n        baseApiUrl: \"http://localhost:3001/api/\",\n        langLocale: \"ru\"\n      };\n  });\n\n})();\n\n(function () {\n  'use strict';\n\n  angular\n    .module('wrlUi')\n    .config(config);\n\n  /** @ngInject */\n  function config($logProvider, toastrConfig, LoopBackResourceProvider, localStorageServiceProvider, $httpProvider) {\n    // Enable log\n    $logProvider.debugEnabled(true);\n\n    // Set options third-party lib\n    toastrConfig.allowHtml = true;\n    toastrConfig.timeOut = 3000;\n    toastrConfig.positionClass = 'toast-top-right';\n    toastrConfig.preventDuplicates = true;\n    toastrConfig.progressBar = true;\n\n    // Set base api Url\n    LoopBackResourceProvider.setUrlBase('http://localhost:3001/api');\n\n    // Config local storage provider\n    localStorageServiceProvider\n      .setPrefix('wrl');\n\n    // Set interceptor for $httpProvider\n    $httpProvider.interceptors.push('authInterceptionService');\n  }\n\n})();\n\nangular.module(\"wrlUi\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/main/main.html\",\"<div class=\\\"container\\\"><div class=\\\"row\\\"></div><div class=\\\"row jumbotron text-center\\\"><h1>Web Realty Life</h1></div><div class=\\\"row\\\"><div class=\\\"col-lg-6\\\"><div class=\\\"panel panel-primary\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Вход</h3></div><div class=\\\"panel-body\\\">Чтобы начать пользоваться системой необходимо войти в систему под своей учетной записью. Если у Вас еще нет учетной записи, воспользуйтесь инструкцией в блоке Регистрация. Для входа в систему нажмите в правом верхнем углу ссылку с названием \\\"Вход\\\", или нажмите кнопку \\\"Вход\\\" ниже в этом блоке.<div><button type=\\\"button\\\" class=\\\"btn btn-primary full-container-width\\\">Вход</button></div></div></div></div><div class=\\\"col-lg-6\\\"><div class=\\\"panel panel-success\\\"><div class=\\\"panel-heading\\\"><h3 class=\\\"panel-title\\\">Регистрация</h3></div><div class=\\\"panel-body\\\">Для того чтобы воспользоваться приватной частью системы небоходимо пройти регистрацию. Для этого Вам необходимо в правом верхнем углу нажать на ссылку с названием \\\"Регистрация\\\", или нажать на кнопку \\\"Регистрация\\\" ниже в этом блоке.<div><button type=\\\"button\\\" class=\\\"btn btn-success full-container-width\\\">Регистрация</button></div></div></div></div></div></div>\");\n$templateCache.put(\"app/components/footer/footer.html\",\"<div class=\\\"panel-footer navbar-fixed-bottom\\\"><div class=\\\"container\\\"><p class=\\\"text-muted\\\">Разработано: Nick Colipso.</p></div></div>\");\n$templateCache.put(\"app/components/navbar/navbar.html\",\"<div class=\\\"navbar navbar-default navbar-static-top\\\" role=\\\"navigation\\\"><div class=\\\"container\\\"><div class=\\\"navbar-header\\\"><a class=\\\"navbar-brand\\\" ui-sref=\\\"home\\\">Домашняя</a></div><div class=\\\"collapse navbar-collapse\\\"><ul class=\\\"nav navbar-nav navbar-right\\\"><li ng-hide=\\\"!vm.isAuthenticated\\\"><a><span ng-bind=\\\"\\'Добро пожаловать \\' + vm.userEmail\\\"></span></a></li><li ng-hide=\\\"!vm.isAuthenticated\\\"><a ui-sref=\\\"apartments\\\">Квартиры</a></li><li ng-hide=\\\"!vm.isAuthenticated\\\"><a ng-click=\\\"vm.logOut()\\\">Выйти</a></li><li ng-hide=\\\"vm.isAuthenticated\\\"><a ui-sref=\\\"login\\\">Войти</a></li><li ng-hide=\\\"vm.isAuthenticated\\\"><a ui-sref=\\\"signup\\\">Регистрация</a></li></ul></div></div></div>\");\n$templateCache.put(\"app/components/apartments/templates/apartmentDetails.html\",\"<div id=\\\"apartment-edit-form\\\"><div class=\\\"modal-header\\\"><h3 class=\\\"modal-title\\\">Новая квартира</h3></div><div class=\\\"modal-body\\\"><form><div class=\\\"form-group\\\"><label for=\\\"streetName\\\">Название улицы</label> <input ng-model=\\\"vm.apartment.streetName\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"streetName\\\" placeholder=\\\"Название улицы\\\"></div><div class=\\\"form-group\\\"><label for=\\\"houseNumber\\\">Номер дома</label> <input ng-model=\\\"vm.apartment.houseNumber\\\" type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"houseNumber\\\" placeholder=\\\"Номер дома\\\"></div></form></div><div class=\\\"modal-footer\\\"><button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ng-click=\\\"vm.save()\\\">Сохранить</button> <button class=\\\"btn btn-warning\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\">Отмена</button></div></div>\");\n$templateCache.put(\"app/components/apartments/templates/apartmentsList.html\",\"<div id=\\\"menu-trigger\\\" snap-toggle=\\\"left\\\" title=\\\"Показать/скрыть Меню\\\"><i class=\\\"glyphicon glyphicon-menu-hamburger\\\"></i></div><snap-drawer id=\\\"side-menu\\\"><div class=\\\"panel panel-default\\\"><div class=\\\"panel-heading\\\"><h4>Меню</h4></div><div class=\\\"panel-body\\\"><uib-accordion close-others=\\\"true\\\"><uib-accordion-group heading=\\\"Элементы\\\"><div class=\\\"list-group\\\"><button ng-click=\\\"vm.editApartment()\\\" class=\\\"list-group-item\\\"><span class=\\\"glyphicon glyphicon-home\\\"></span> Добавить квартиру</button> <button ng-click=\\\"\\\" class=\\\"list-group-item\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> В разработке</button> <button ng-click=\\\"\\\" class=\\\"list-group-item\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> В разработке</button> <button ng-click=\\\"\\\" class=\\\"list-group-item\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> В разработке</button></div></uib-accordion-group><uib-accordion-group heading=\\\"Поиск\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-change=\\\"vm.findApartments()\\\" ng-model-options=\\\"{ debounce: 1000 }\\\" ng-model=\\\"vm.searchBy.streetName\\\"></uib-accordion-group></uib-accordion></div></div></snap-drawer><snap-content snap-content=\\\"\\\" class=\\\"container-fluid\\\" ui-i18n=\\\"{{vm.lang}}\\\"><div snap-ignore=\\\"true\\\" ui-grid=\\\"vm.gridOptions\\\" class=\\\"myGrid\\\" ui-grid-resize-columns=\\\"\\\"></div></snap-content>\");\n$templateCache.put(\"app/components/security/templates/login.html\",\"<div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-lg-8 alert alert-dismissible alert-danger\\\" ng-show=\\\"vm.message.length > 0\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">×</button> <strong>Вход не выполнен!</strong><p ng-bind=\\\"vm.message\\\"></p></div><div class=\\\"col-lg-8\\\"><div class=\\\"well\\\"><form class=\\\"form-horizontal\\\" role=\\\"form\\\"><fieldset><legend>Введите свои данные для входа</legend><div class=\\\"form-group\\\"><label for=\\\"inputName\\\" class=\\\"col-lg-3 control-label\\\">Логин</label><div class=\\\"col-lg-9\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputName\\\" ng-model=\\\"vm.loginData.email\\\" placeholder=\\\"Имя Пользователя\\\"></div></div><div class=\\\"form-group\\\"><label for=\\\"inputPassword\\\" class=\\\"col-lg-3 control-label\\\">Пароль</label><div class=\\\"col-lg-9\\\"><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword\\\" ng-model=\\\"vm.loginData.password\\\" placeholder=\\\"Пароль\\\"></div></div><div class=\\\"form-group\\\"><div class=\\\"col-lg-9 col-lg-offset-3\\\"><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.login()\\\">Войти</button> <button type=\\\"reset\\\" class=\\\"btn btn-warning\\\">Отмена</button></div></div></fieldset></form></div></div></div></div>\");\n$templateCache.put(\"app/components/security/templates/signup.html\",\"<div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-lg-8 alert alert-dismissible alert-danger\\\" ng-show=\\\"vm.message.length > 0\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"alert\\\">×</button> <strong>Регистрация не завершена!</strong><p ng-bind=\\\"vm.message\\\"></p></div><div class=\\\"col-lg-8\\\"><div class=\\\"well\\\"><form class=\\\"form-horizontal\\\" role=\\\"form\\\"><fieldset><legend>Введите свои данные для регистрации</legend><div class=\\\"form-group\\\"><label for=\\\"inputEmail\\\" class=\\\"col-lg-3 control-label\\\">Логин</label><div class=\\\"col-lg-9\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputEmail\\\" ng-model=\\\"vm.registration.email\\\" placeholder=\\\"Email Пользователя\\\"></div></div><div class=\\\"form-group\\\"><label for=\\\"inputPassword\\\" class=\\\"col-lg-3 control-label\\\">Пароль</label><div class=\\\"col-lg-9\\\"><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword\\\" ng-model=\\\"vm.registration.password\\\" placeholder=\\\"Пароль\\\"></div></div><div class=\\\"form-group\\\"><label for=\\\"inputRepeatPassword\\\" class=\\\"col-lg-3 control-label\\\">Повторите Пароль</label><div class=\\\"col-lg-9\\\"><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputRepeatPassword\\\" ng-model=\\\"vm.registration.confirmPassword\\\" placeholder=\\\"Введите Пароль еще раз\\\"></div></div><div class=\\\"form-group\\\"><div class=\\\"col-lg-9 col-lg-offset-3\\\"><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.signUp()\\\">Регистрация</button> <button type=\\\"reset\\\" class=\\\"btn btn-warning\\\">Отмена</button></div></div></fieldset></form></div></div></div></div>\");}]);"],"sourceRoot":"/source/"}